/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { WavePortal, WavePortalInterface } from "../WavePortal";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NewWave",
    type: "event",
  },
  {
    inputs: [],
    name: "getAllWaves",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "waver",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct WavePortal.Wave[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalWaves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastWavedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "wave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526200004f6040518060400160405280601681526020017f4920616d20736f20736d6172742c20532d4d2d522d54000000000000000000008152506200007760201b620006021760201c565b606444426200005f9190620001c4565b6200006b919062000261565b60018190555062000308565b62000117816040516024016200008e919062000184565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200011a60201b60201c565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b60006200015082620001a8565b6200015c8185620001b3565b93506200016e8185602086016200022b565b6200017981620002f7565b840191505092915050565b60006020820190508181036000830152620001a0818462000143565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000620001d18262000221565b9150620001de8362000221565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000216576200021562000299565b5b828201905092915050565b6000819050919050565b60005b838110156200024b5780820151818401526020810190506200022e565b838111156200025b576000848401525b50505050565b60006200026e8262000221565b91506200027b8362000221565b9250826200028e576200028d620002c8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b61121a80620003186000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063449d46c0146100515780639a2cdc081461006d578063a42a46631461008b578063bd43a908146100bb575b600080fd5b61006b600480360381019061006691906109e4565b6100d9565b005b610075610490565b6040516100829190610d96565b60405180910390f35b6100a560048036038101906100a091906109bb565b610499565b6040516100b29190610d96565b60405180910390f35b6100c36104b1565b6040516100d09190610c4d565b60405180910390f35b42601e600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546101269190610ea8565b10610166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015d90610d76565b60405180910390fd5b60016000808282546101789190610ea8565b925050819055506101bf6040518060400160405280601f81526020017f25732068617320776176656420776974682061206d6573736167653a20257300815250338361069b565b600260405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061027e92919061089b565b506040820151816002015550506064600154424461029c9190610ea8565b6102a69190610ea8565b6102b09190610fdf565b6001819055506102f76040518060400160405280601681526020017f52616e646f6d20232067656e6572617465643a2025640000000000000000000081525060015461073a565b60326001541161043d576103406040518060400160405280600781526020017f257320776f6e2100000000000000000000000000000000000000000000000000815250336107d6565b6000655af3107a400090504781111561038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038590610d36565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826040516103b490610c38565b60006040518083038185875af1925050503d80600081146103f1576040519150601f19603f3d011682016040523d82523d6000602084013e6103f6565b606091505b505090508061043a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043190610d56565b60405180910390fd5b50505b3373ffffffffffffffffffffffffffffffffffffffff167f5f7e16dc676677766a70e9c5628aa6c54ddb8b6e5188e2ae1e1f17f1ffbea7164283604051610485929190610db1565b60405180910390a250565b60008054905090565b60036020528060005260406000206000915090505481565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156105f957838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461055e90610f7c565b80601f016020809104026020016040519081016040528092919081815260200182805461058a90610f7c565b80156105d75780601f106105ac576101008083540402835291602001916105d7565b820191906000526020600020905b8154815290600101906020018083116105ba57829003601f168201915b50505050508152602001600282015481525050815260200190600101906104d5565b50505050905090565b610698816040516024016106169190610c6f565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610872565b50565b6107358383836040516024016106b393929190610cc1565b6040516020818303038152906040527fe0e9ad4f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610872565b505050565b6107d28282604051602401610750929190610d06565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610872565b5050565b61086e82826040516024016107ec929190610c91565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610872565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280546108a790610f7c565b90600052602060002090601f0160209004810192826108c95760008555610910565b82601f106108e257805160ff1916838001178555610910565b82800160010185558215610910579182015b8281111561090f5782518255916020019190600101906108f4565b5b50905061091d9190610921565b5090565b5b8082111561093a576000816000905550600101610922565b5090565b600061095161094c84610e06565b610de1565b90508281526020810184848401111561096957600080fd5b610974848285610f3a565b509392505050565b60008135905061098b816111cd565b92915050565b600082601f8301126109a257600080fd5b81356109b284826020860161093e565b91505092915050565b6000602082840312156109cd57600080fd5b60006109db8482850161097c565b91505092915050565b6000602082840312156109f657600080fd5b600082013567ffffffffffffffff811115610a1057600080fd5b610a1c84828501610991565b91505092915050565b6000610a318383610bca565b905092915050565b610a4281610efe565b82525050565b610a5181610efe565b82525050565b6000610a6282610e47565b610a6c8185610e6a565b935083602082028501610a7e85610e37565b8060005b85811015610aba5784840389528151610a9b8582610a25565b9450610aa683610e5d565b925060208a01995050600181019050610a82565b50829750879550505050505092915050565b6000610ad782610e52565b610ae18185610e86565b9350610af1818560208601610f49565b610afa816110cc565b840191505092915050565b6000610b1082610e52565b610b1a8185610e97565b9350610b2a818560208601610f49565b610b33816110cc565b840191505092915050565b6000610b4b603483610e97565b9150610b56826110dd565b604082019050919050565b6000610b6e602783610e97565b9150610b798261112c565b604082019050919050565b6000610b91602983610e97565b9150610b9c8261117b565b604082019050919050565b6000610bb4600083610e7b565b9150610bbf826111ca565b600082019050919050565b6000606083016000830151610be26000860182610a39565b5060208301518482036020860152610bfa8282610acc565b9150506040830151610c0f6040860182610c1a565b508091505092915050565b610c2381610f30565b82525050565b610c3281610f30565b82525050565b6000610c4382610ba7565b9150819050919050565b60006020820190508181036000830152610c678184610a57565b905092915050565b60006020820190508181036000830152610c898184610b05565b905092915050565b60006040820190508181036000830152610cab8185610b05565b9050610cba6020830184610a48565b9392505050565b60006060820190508181036000830152610cdb8186610b05565b9050610cea6020830185610a48565b8181036040830152610cfc8184610b05565b9050949350505050565b60006040820190508181036000830152610d208185610b05565b9050610d2f6020830184610c29565b9392505050565b60006020820190508181036000830152610d4f81610b3e565b9050919050565b60006020820190508181036000830152610d6f81610b61565b9050919050565b60006020820190508181036000830152610d8f81610b84565b9050919050565b6000602082019050610dab6000830184610c29565b92915050565b6000604082019050610dc66000830185610c29565b8181036020830152610dd88184610b05565b90509392505050565b6000610deb610dfc565b9050610df78282610fae565b919050565b6000604051905090565b600067ffffffffffffffff821115610e2157610e2061109d565b5b610e2a826110cc565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610eb382610f30565b9150610ebe83610f30565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ef357610ef2611010565b5b828201905092915050565b6000610f0982610f10565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610f67578082015181840152602081019050610f4c565b83811115610f76576000848401525b50505050565b60006002820490506001821680610f9457607f821691505b60208210811415610fa857610fa761106e565b5b50919050565b610fb7826110cc565b810181811067ffffffffffffffff82111715610fd657610fd561109d565b5b80604052505050565b6000610fea82610f30565b9150610ff583610f30565b9250826110055761100461103f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f547279696e6720746f207769746864726177206d6f7265206d6f6e657920746860008201527f616e2074686520636f6e7472616374206861732e000000000000000000000000602082015250565b7f4661696c656420746f207769746864726177206d6f6e65792066726f6d20636f60008201527f6e74726163742e00000000000000000000000000000000000000000000000000602082015250565b7f4d7573742077616974203330207365636f6e6473206265666f7265207761766960008201527f6e6720616761696e2e0000000000000000000000000000000000000000000000602082015250565b50565b6111d681610efe565b81146111e157600080fd5b5056fea2646970667358221220da79f2358ddbdd9bff71397ee7a21a1381a42dbb79d65084238fd121de97a43764736f6c63430008040033";

type WavePortalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WavePortalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WavePortal__factory extends ContractFactory {
  constructor(...args: WavePortalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<WavePortal> {
    return super.deploy(overrides || {}) as Promise<WavePortal>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WavePortal {
    return super.attach(address) as WavePortal;
  }
  override connect(signer: Signer): WavePortal__factory {
    return super.connect(signer) as WavePortal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WavePortalInterface {
    return new utils.Interface(_abi) as WavePortalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WavePortal {
    return new Contract(address, _abi, signerOrProvider) as WavePortal;
  }
}
